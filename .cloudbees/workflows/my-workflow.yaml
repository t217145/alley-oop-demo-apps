apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My workflow
on:
  # push:
  #   branches:
  #     - "**"
  workflow_dispatch:
    inputs:
      repo_name:
        type: string
        default: t217145/alley-oop-demo-apps
        required: true
        description: Repository Name (do not include the https://github.com/) E.g. t217145/alley-oop-demo-apps
      repo_url:
        type: string
        default: https://github.com/
        description: Repository URL. Default is https://github.com
      # suppose to read the jenkins.properties
      appVersion:
        type: string
        default: "1.0"
        description: Application version, suppose to read the jenkins.properties    
      appName:
        type: string
        default: "demo-apps"
        description: Application name, suppose to read the jenkins.properties  

jobs:
  Compile:
    environment: sandbox
    steps:
      - uses: cloudbees-io/checkout@v1
        name: checkout
        with:
          provider: github
          repository: ${{ inputs.repo_name }}
          ref: main
          token: ${{secrets.GITHUB_TOKEN}}
          path: ./app
          github-server-url: ${{ inputs.repo_url }}
      - id: sonarcloud
        name: SonarCloud
        uses: docker://nginx:latest
        run: |
          apt update -y && apt upgrade -y
          apt install git -y && apt install unzip -y
          curl -o cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-linux-x64.zip
          unzip cli.zip 
          cd sonar-scanner-7.1.0.4889-linux-x64/bin
          git clone https://${{vars.GITHUB_ACCOUNT}}:${{secrets.GITHUB_TOKEN}}@github.com/${{ inputs.repo_name }}.git apps
          ./sonar-scanner -Dsonar.token=${{ secrets.SONARQUBE_TOKEN}} -Dproject.settings=apps/sonar-project.properties -Dsonar.projectBaseDir=apps -Dsonar.host.url=https://sonarcloud.io/
      - id: sonarscan
        name: Scan with SonarQube bundled
        uses: https://github.com/cloudbees-io/sonarqube-bundled-sast-scan-code@v2
        with:
          language: LANGUAGE_JAVA
      - id: print-sonarqube-result
        name: Print SonarQube Result
        uses: docker://alpine:latest
        run: |
            echo "Outputs from upstream SonarQube step:"
            echo "Critical Count: ${{steps.sonarscan.outputs.critical-count}}"
            echo "Very High Count: ${{steps.sonarscan.outputs.very-high-count}}"
            echo "High Count: ${{steps.sonarscan.outputs.high-count}}"
            echo "Medium Count: ${{steps.sonarscan.outputs.medium-count}}"
            echo "Low Count: ${{steps.sonarscan.outputs.low-count}}"            
      - uses: docker://gradle:8.14.2-jdk17
        name: compile
        with:
            entrypoint: ''
        run: |
            cd ./app
            gradle clean build -PappVersion=${{ inputs.appVersion }}  -PappName=${{ inputs.appName }}
            curl -H "X-JFrog-Art-Api:${{ secrets.JFROG_TOKEN }}" -X PUT "${{ vars.JFROG_URL }}artifactory/${{ vars.JFROG_REPO }}/${{ inputs.appName }}/${{ inputs.appVersion }}/Dockerfile" -T Dockerfile
            curl -H "X-JFrog-Art-Api:${{ secrets.JFROG_TOKEN }}" -X PUT "${{ vars.JFROG_URL }}artifactory/${{ vars.JFROG_REPO }}/${{ inputs.appName }}/${{ inputs.appVersion }}/${{ inputs.appName }}-${{ inputs.appVersion }}.jar" -T ./build/libs/${{ inputs.appName }}-${{ inputs.appVersion }}.jar
      - name: Download
        uses: docker://nginx:latest
        with:
            entrypoint: ''
        run: |
            apt-get update -y && apt-get upgrade -y
            apt-get install wget -y
            wget --header='X-JFrog-Art-Api:${{ secrets.JFROG_TOKEN }}' -O Dockerfile '${{ vars.JFROG_URL }}artifactory/${{ vars.JFROG_REPO }}/${{ inputs.appName }}/${{ inputs.appVersion }}/Dockerfile'
            wget --header='X-JFrog-Art-Api:${{ secrets.JFROG_TOKEN }}' -O app.jar '${{ vars.JFROG_URL }}artifactory/${{ vars.JFROG_REPO }}/${{ inputs.appName }}/${{ inputs.appVersion }}/${{ inputs.appName }}-${{ inputs.appVersion }}.jar'
      - name: Login to JFrog Container Reop
        uses: https://github.com/cloudbees-io/configure-oci-credentials@v1
        with:
            registry: ${{ vars.JFROG_DOMAIN }}
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push image to JFrog
        uses: https://github.com/cloudbees-io/kaniko@v1
        with:
            destination: ${{ vars.JFROG_DOMAIN }}/${{ vars.CONTAINER_REPO }}/${{ inputs.appName }}:${{ inputs.appVersion }}
      - name: Pack
        uses: docker://nginx:latest
        with:
            entrypoint: ''
        run: |
            apt-get update -y && apt-get upgrade -y
            apt-get install wget -y
            apt-get install git -y
            wget https://get.helm.sh/helm-v3.18.3-linux-amd64.tar.gz
            tar -zxvf helm-v3.18.3-linux-amd64.tar.gz
            cd linux-amd64
            git clone https://${{vars.GITHUB_HKJC_ACCOUNT}}:${{secrets.GITHUB_HKJC_TOKEN}}@github.com/${{ inputs.repo_name }}.git apps
            git clone https://${{vars.GITHUB_HKJC_ACCOUNT}}:${{secrets.GITHUB_HKJC_TOKEN}}@github.com/Copilot-POC-Org/alley-oop-cicd-helm.git helm-chart
            cp -f apps/helm/values.yaml helm-chart/values.yaml
            cd helm-chart
            ../helm package .
            ../helm push alley-oop-app-0.0.1.tgz oci://${{ vars.JFROG_DOMAIN }}/aop-cicd-helm